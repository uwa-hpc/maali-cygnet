##############################################################################
# maali cygnet file for Boost
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

Boost provides free peer-reviewed portable C++ source libraries.

We emphasize libraries that work well with the C++ Standard Library. Boost
libraries are intended to be widely useful, and usable across a broad spectrum
of applications. The Boost license encourages both commercial and
non-commercial use.

For further information see http://www.boost.org/

EOF

# Request only the latest GNU and Intel compilers to be used
#MAALI_TOOL_COMPILERS="gcc/5.5.0 gcc/7.2.0 intel/17.0.5"
#MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_GCC_COMPILIERS"
MAALI_TOOL_COMPILERS="gcc/11.5.0"

# needed  for this URL
MAALI_BOOST_VERSION=`echo $MAALI_TOOL_VERSION| sed -e 's/\./_/g'`

# URL to download the source code from
MAALI_URL="http://sourceforge.net/projects/$MAALI_TOOL_NAME/files/$MAALI_TOOL_NAME/$MAALI_TOOL_VERSION/"$MAALI_TOOL_NAME"_"$MAALI_BOOST_VERSION".tar.bz2/download"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/"$MAALI_TOOL_NAME"_"$MAALI_BOOST_VERSION".tar.bz2"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/"$MAALI_TOOL_NAME"_"$MAALI_BOOST_VERSION

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites
#MAALI_TOOL_PREREQ="python"

# add additional configure options
MAALI_TOOL_CONFIGURE='--without-python '
MAALI_TOOL_CONFIGURE+='--without-graph_parallel '
MAALI_TOOL_CONFIGURE+='cxxstd=17 toolset=intel-linux '
MAALI_TOOL_CONFIGURE+='link=shared '
MAALI_TOOL_CONFIGURE+='address-model=64 '
MAALI_TOOL_CONFIGURE+='architecture=x86 '
MAALI_TOOL_CONFIGURE+='runtime-link=shared '

# for auto-building module files
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_C_INCLUDE_PATH=1
MAALI_MODULE_SET_CPLUS_INCLUDE_PATH=1
MAALI_MODULE_SET_BOOST_ROOT='$MAALI_APP_HOME'

##############################################################################

function maali_build {

  cd "$MAALI_TOOL_BUILD_DIR"

# allows late evaluation
  MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

  # Intel-compiler specifics
  if [ "$MAALI_COMPILER_NAME" == "intel"* ]; then 

    maali_run "./bootstrap.sh --prefix=$MAALI_INSTALL_DIR --with-toolset=intel"
    maali_run "./b2  install toolset=intel --prefix=$MAALI_INSTALL_DIR -j$MAALI_CORES"
    
  # Intel openapi compiler
  elif [ "$MAALI_COMPILER_NAME" == "compiler" ]; then
    maali_run "sed -i -e 's/\-pch\-create/\-Xclang \-emit\-pch \-o /g'  ./tools/build/src/tools/intel-linux.jam"
    maali_run "./bootstrap.sh --prefix=$MAALI_INSTALL_DIR --with-toolset=intel-linux"
    maali_run "./b2  install -prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL -j$MAALI_CORES "

  # GNU compiler specifics
  else

    maali_run "./bootstrap.sh --prefix=$MAALI_INSTALL_DIR --with-toolset=gcc"
    maali_run "./b2 install toolset=gcc --prefix=$MAALI_INSTALL_DIR -j$MAALI_CORES"

  fi


}

##############################################################################
